using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class DroneController : MonoBehaviour
{
    // the force applied to the drone to move it
    public float force = 40.0f;

    // the drag applied to the drone to slow it down
    public float drag = 0.3f;

    // the amount of lift generated by the drone's propellers
    public float lift = 30.0f;

    // the maximum speed the drone can move
    public float maxSpeed = 60.0f;

    // the current velocity of the drone
    private Vector3 velocity = Vector3.zero;

    // tha body of the drone
    public GameObject droneBody;

    // all 4 fans on the drone
    public List<GameObject> droneFans;

    private void Start()
    {
        var sceneObject = FindObjectOfType<SceneObject>();

        while (sceneObject == null)
        {
            sceneObject = FindObjectOfType<SceneObject>();
        }

        if (sceneObject != null)
        {
            droneBody.GetComponent<MeshRenderer>().material = sceneObject.body;
            foreach (GameObject fan in droneFans)
            {
                fan.GetComponent<MeshRenderer>().material = sceneObject.fans;
            }
        }
    }

    // Update is called once per frame
    void FixedUpdate()
    {
        // get the horizontal and vertical input from the player
        float horizontalInput = Input.GetAxis("Horizontal");
        float verticalInput = Input.GetAxis("Vertical");

        // calculate the desired movement direction based on the input
        //Vector3 movement = new Vector3(horizontalInput, 0.0f, verticalInput);

        // get the drone's forward & right directions
        Vector3 droneForward = transform.forward;
        Vector3 droneRight = transform.right;

        // project the movement input onto the drone's forward direction
        Vector3 movement = Vector3.ProjectOnPlane(droneForward, Vector3.up) * verticalInput + Vector3.ProjectOnPlane(transform.right, Vector3.up) * horizontalInput;

        // apply a force to the drone to move it in the desired direction
        GetComponent<Rigidbody>().AddForce(movement * force);

        // if the player is holding down the jump button, apply an upward force to the drone to make it fly
        if (Input.GetButton("Jump"))
        {
            GetComponent<Rigidbody>().AddForce(Vector3.up * lift);
        }

        // if the player is holding down the control button, apply a downward force to the drone to make it go down
        if (Input.GetButton("Control"))
        {
            GetComponent<Rigidbody>().AddForce(Vector3.down * lift);
        }

        // tilt the drone on the x and z axes in the direction it is moving
        if (Input.GetButton("Horizontal") || Input.GetButton("Vertical"))
        {
            if (Input.GetAxis("Horizontal") < 0)
            {
                transform.rotation = Quaternion.Slerp(transform.rotation, Quaternion.Euler(transform.rotation.eulerAngles.z, transform.rotation.eulerAngles.y, 30.0f), Time.fixedDeltaTime);
            }
            else if (Input.GetAxis("Horizontal") > 0)
            {
                transform.rotation = Quaternion.Slerp(transform.rotation, Quaternion.Euler(transform.rotation.eulerAngles.z, transform.rotation.eulerAngles.y, -30.0f), Time.fixedDeltaTime);
            }
            if (Input.GetAxis("Vertical") < 0)
            {
                transform.rotation = Quaternion.Slerp(transform.rotation, Quaternion.Euler(-30.0f, transform.rotation.eulerAngles.y, transform.rotation.eulerAngles.z), Time.fixedDeltaTime);
            }
            else if (Input.GetAxis("Vertical") > 0)
            {
                transform.rotation = Quaternion.Slerp(transform.rotation, Quaternion.Euler(30.0f, transform.rotation.eulerAngles.y, transform.rotation.eulerAngles.z), Time.fixedDeltaTime);
            }
        }
        else
        {
            // reset the rotation of the drone when it is not moving
            Quaternion targetRotation = Quaternion.Euler(0.0f, transform.rotation.eulerAngles.y, 0.0f);
            transform.rotation = Quaternion.Slerp(transform.rotation, targetRotation, Time.fixedDeltaTime);
        }

        // apply drag to the drone to slow it down
        GetComponent<Rigidbody>().AddForce(-velocity * drag);

        // limit the maximum speed of the drone
        velocity = GetComponent<Rigidbody>().velocity;
        if (velocity.magnitude > maxSpeed)
        {
            velocity = velocity.normalized * maxSpeed;
            GetComponent<Rigidbody>().velocity = velocity;
        }
        
    }
}
